package meds

import (
	"fmt"
	"math"
	"math/rand"
	"meds/finiteField"
	"meds/matrix"
	"os"
	"os/exec"
	"strconv"
	"strings"
	"testing"

	"golang.org/x/crypto/sha3"
)

func TestCompressG(t *testing.T) {
	k := 14
	m := 14
	n := 14
	G := matrix.New(k, m*n, q)
	E := matrix.New(k, m*n, q)
	for i := 0; i < G.M; i++ {
		for j := 0; j < G.N; j++ {
			n := rand.Intn(int(q))
			G.Set(i, j, finiteField.NewFieldElm(n, q))
			if i == 1 && j >= G.N-k {
				E.Set(i, j, G.Get(i, j))

			} else if i > 1 {
				E.Set(i, j, G.Get(i, j))
			}
		}
	}

	for i := 0; i < G.M; i++ {
		for j := 0; j < G.M; j++ {
			if i == j {
				G.Get(i, j).Set(1)
				E.Get(i, j).Set(1)
			} else {
				G.Get(i, j).Set(0)
				E.Get(i, j).Set(0)
			}
		}
	}
	for i := 1; i < m; i++ {
		G.Get(0, i*(n+1)).Set(1)
		E.Get(0, i*(n+1)).Set(1)
	}
	for i := 1; i < m-1; i++ {
		G.Get(0, i*(n+1)+1).Set(1)
		E.Get(0, i*(n+1)+1).Set(1)
	}

	R := DecompressG(CompressG(G), q, m, n, k)
	if !R.Equals(E) {
		t.Errorf("Compressed then decompressed is not equal to itself\nE:%v\nR:%v", E, R)
		return
	}
}

func TestSF(t *testing.T) {
	q = 4093
	for k := 2; k < 21; k++ {
		m := k
		n := k
		G := matrix.New(k, m*n, q)
		for i := 0; i < G.M; i++ {
			for j := 0; j < G.N; j++ {
				n := rand.Intn(int(q))
				G.Set(i, j, finiteField.NewFieldElm(n, q))
			}
		}
		// t.Logf("G: %v", G)

		// Write A and B to a file
		err := os.WriteFile("SF_test.txt", G.Compress(), 0666)
		if err != nil {
			t.Errorf("Unable to create file SF_test.txt: %v", err)
			return
		}

		// Compute using SageMath the correct matrix product and save to a file
		cmd := exec.Command("sage", "utils_test.sage", "sf", strconv.Itoa(int(G.Q)), strconv.Itoa(G.M), strconv.Itoa(G.N))
		output, err := cmd.Output()
		if err != nil {
			t.Errorf("Unable to create the E matrix: %v", err)
			return
		}

		var b strings.Builder
		b.Write(output)
		t.Logf("sagemath output: \n%v", b.String())
		// Read E result and parse into a matrix
		file_content, err := os.ReadFile("E_test.txt")
		if err != nil {
			t.Errorf("Unable to read E matrix file: %v", err)
			return
		}

		// Check E == AB
		E := matrix.Decompress(file_content, G.M, G.N, G.Q)

		R := SF(G)
		if !R.Equals(E) {
			t.Errorf("\nSF(G): %v\nE: %v\n", R, E)
		}
	}
}

func TestSF_on_submatrix(t *testing.T) {
	q = 7
	for k := 2; k < 21; k++ {
		m := k
		n := k
		G := matrix.New(k, m*n, q)
		for i := 0; i < G.M; i++ {
			for j := 0; j < G.N; j++ {
				n := rand.Intn(int(q))
				G.Set(i, j, finiteField.NewFieldElm(n, q))
			}
		}
		t.Logf("G: %v", G)
		E := SF(G)
		R := matrix.Decompress(G.Compress(), G.M, G.N, G.Q)
		SF_on_submatrix(R, 0, 0, R.M, R.N)
		if !R.Equals(E) {
			t.Errorf("\nSF(G): %v\nE: %v\n", R, E)
		}
	}
}

func TestSolve(t *testing.T) {
	// q = 7 test case
	k := 4
	m := k
	n := k
	p0 := [][]int{
		{1, 3, 0, 4},
		{0, 2, 0, 0},
		{0, 3, 6, 3},
		{0, 2, 6, 6},
	}
	p1 := [][]int{
		{0, 2, 5, 3},
		{1, 2, 2, 6},
		{0, 0, 2, 1},
		{0, 2, 4, 4},
	}

	e_a := [][]int{
		{2, 5, 3, 1},
		{2, 5, 4, 1},
		{0, 6, 1, 2},
		{3, 6, 5, 4},
	}
	e_b_inv := [][]int{
		{0, 3, 1, 6},
		{0, 3, 0, 5},
		{5, 5, 2, 2},
		{2, 5, 4, 3},
	}

	P := make([]*matrix.Matrix, 2)

	P[0] = matrix.New(m, n, 7)
	P[1] = matrix.New(m, n, 7)
	E_A := matrix.New(m, n, 7)
	E_B_inv := matrix.New(m, n, 7)
	for i := 0; i < P[0].M; i++ {
		for j := 0; j < P[0].N; j++ {
			P[0].Set(i, j, finiteField.NewFieldElm(p0[i][j], 7))
			P[1].Set(i, j, finiteField.NewFieldElm(p1[i][j], 7))
			E_A.Set(i, j, finiteField.NewFieldElm(e_a[i][j], 7))
			E_B_inv.Set(i, j, finiteField.NewFieldElm(e_b_inv[i][j], 7))
		}
	}
	P[0] = P[0].Transpose()
	P[1] = P[1].Transpose()

	G := MatriciesToRows(P)

	// for i := 0; i < G.M; i++ {
	// 	for j := 0; j < G.N; j++ {
	// 		n := rand.Intn(int(q))
	// 		G.Set(i, j, finiteField.NewFieldElm(n, q))
	// 	}
	// }

	a := finiteField.NewFieldElm(-3, 7)
	t.Logf("(k, m, n): (%v, %v, %v)\n", k, m, n)
	t.Logf("q: %v\n", 7)
	t.Logf("a[m-1, m-1]: %v\n", a)
	// for a.Equals(finiteField.NewFieldElm(0, q)) {
	// 	a = finiteField.NewFieldElm(rand.Intn(q), q)
	// }
	A, B_inv := Solve(G, a, m, n)
	if A == nil || B_inv == nil || !A.Equals(E_A) || !B_inv.Equals(E_B_inv) {
		t.Fatalf("A: %v\nB_inv: %v", A, B_inv)
	}

	// q = 11 test

	p0 = [][]int{
		{1, 4, 4, 2},
		{0, 7, 7, 5},
		{0, 3, 6, 10},
		{0, 9, 0, 0},
	}
	p1 = [][]int{
		{0, 9, 6, 10},
		{1, 4, 8, 6},
		{0, 8, 10, 7},
		{0, 8, 9, 9},
	}
	e_a = [][]int{
		{2, 10, 8, 0},
		{3, 1, 1, 3},
		{3, 0, 2, 6},
		{9, 8, 6, 9},
	}
	e_b_inv = [][]int{
		{8, 5, 1, 2},
		{6, 7, 6, 9},
		{1, 0, 6, 0},
		{6, 0, 7, 6},
	}

	P = make([]*matrix.Matrix, 2)

	P[0] = matrix.New(m, n, 11)
	P[1] = matrix.New(m, n, 11)
	E_A = matrix.New(m, n, 11)
	E_B_inv = matrix.New(m, n, 11)
	for i := 0; i < P[0].M; i++ {
		for j := 0; j < P[0].N; j++ {
			P[0].Set(i, j, finiteField.NewFieldElm(p0[i][j], 11))
			P[1].Set(i, j, finiteField.NewFieldElm(p1[i][j], 11))
			E_A.Set(i, j, finiteField.NewFieldElm(e_a[i][j], 11))
			E_B_inv.Set(i, j, finiteField.NewFieldElm(e_b_inv[i][j], 11))
		}
	}
	P[0] = P[0].Transpose()
	P[1] = P[1].Transpose()

	G = MatriciesToRows(P)

	// for i := 0; i < G.M; i++ {
	// 	for j := 0; j < G.N; j++ {
	// 		n := rand.Intn(int(q))
	// 		G.Set(i, j, finiteField.NewFieldElm(n, q))
	// 	}
	// }

	a = finiteField.NewFieldElm(-2, 11)
	t.Logf("a[m-1, m-1]: %v\n", a)
	// for a.Equals(finiteField.NewFieldElm(0, q)) {
	// 	a = finiteField.NewFieldElm(rand.Intn(q), q)
	// }
	A, B_inv = Solve(G, a, m, n)
	if !A.Equals(E_A) || !B_inv.Equals(E_B_inv) {
		t.Fatalf("A: %v\nB_inv: %v", A, B_inv)
	}

	// q = 13 test
	p0 = [][]int{
		{1, 1, 1, 5},
		{0, 12, 2, 5},
		{0, 4, 4, 0},
		{0, 9, 12, 5},
	}
	p1 = [][]int{
		{0, 6, 8, 0},
		{1, 12, 5, 8},
		{0, 9, 5, 9},
		{0, 5, 1, 2},
	}
	e_a = [][]int{
		{5, 12, 2, 7},
		{11, 7, 9, 7},
		{0, 1, 6, 11},
		{6, 8, 7, 4},
	}
	e_b_inv = [][]int{
		{2, 1, 4, 11},
		{10, 7, 12, 11},
		{10, 1, 2, 6},
		{2, 0, 8, 7},
	}

	P = make([]*matrix.Matrix, 2)

	P[0] = matrix.New(m, n, 13)
	P[1] = matrix.New(m, n, 13)
	E_A = matrix.New(m, n, 13)
	E_B_inv = matrix.New(m, n, 13)
	for i := 0; i < P[0].M; i++ {
		for j := 0; j < P[0].N; j++ {
			P[0].Set(i, j, finiteField.NewFieldElm(p0[i][j], 13))
			P[1].Set(i, j, finiteField.NewFieldElm(p1[i][j], 13))
			E_A.Set(i, j, finiteField.NewFieldElm(e_a[i][j], 13))
			E_B_inv.Set(i, j, finiteField.NewFieldElm(e_b_inv[i][j], 13))
		}
	}
	P[0] = P[0].Transpose()
	P[1] = P[1].Transpose()

	G = MatriciesToRows(P)

	// for i := 0; i < G.M; i++ {
	// 	for j := 0; j < G.N; j++ {
	// 		n := rand.Intn(int(q))
	// 		G.Set(i, j, finiteField.NewFieldElm(n, q))
	// 	}
	// }

	a = finiteField.NewFieldElm(4, 13)
	t.Logf("a[m-1, m-1]: %v\n", a)
	// for a.Equals(finiteField.NewFieldElm(0, q)) {
	// 	a = finiteField.NewFieldElm(rand.Intn(q), q)
	// }
	A, B_inv = Solve(G, a, m, n)
	if !A.Equals(E_A) || !B_inv.Equals(E_B_inv) {
		t.Fatalf("A: %v\nB_inv: %v", A, B_inv)
	}

	// q = 101 test
	p0 = [][]int{
		{1, 79, 35, 20},
		{0, 31, 99, 76},
		{0, 77, 82, 77},
		{0, 90, 87, 50},
	}
	p1 = [][]int{
		{0, 78, 62, 84},
		{1, 69, 62, 19},
		{0, 0, 74, 51},
		{0, 12, 72, 100},
	}
	e_a = [][]int{
		{47, 61, 57, 86},
		{87, 27, 28, 30},
		{18, 85, 38, 21},
		{74, 28, 96, 33},
	}
	e_b_inv = [][]int{
		{97, 31, 35, 3},
		{63, 31, 19, 3},
		{100, 14, 67, 88},
		{44, 53, 45, 99},
	}

	P = make([]*matrix.Matrix, 2)

	P[0] = matrix.New(m, n, 101)
	P[1] = matrix.New(m, n, 101)
	E_A = matrix.New(m, n, 101)
	E_B_inv = matrix.New(m, n, 101)
	for i := 0; i < P[0].M; i++ {
		for j := 0; j < P[0].N; j++ {
			P[0].Set(i, j, finiteField.NewFieldElm(p0[i][j], 101))
			P[1].Set(i, j, finiteField.NewFieldElm(p1[i][j], 101))
			E_A.Set(i, j, finiteField.NewFieldElm(e_a[i][j], 101))
			E_B_inv.Set(i, j, finiteField.NewFieldElm(e_b_inv[i][j], 101))
		}
	}
	P[0] = P[0].Transpose()
	P[1] = P[1].Transpose()

	G = MatriciesToRows(P)

	// for i := 0; i < G.M; i++ {
	// 	for j := 0; j < G.N; j++ {
	// 		n := rand.Intn(int(q))
	// 		G.Set(i, j, finiteField.NewFieldElm(n, q))
	// 	}
	// }

	a = finiteField.NewFieldElm(33, 101)
	t.Logf("a[m-1, m-1]: %v\n", a)
	// for a.Equals(finiteField.NewFieldElm(0, q)) {
	// 	a = finiteField.NewFieldElm(rand.Intn(q), q)
	// }
	A, B_inv = Solve(G, a, m, n)
	if !A.Equals(E_A) || !B_inv.Equals(E_B_inv) {
		t.Fatalf("A: %v\nB_inv: %v", A, B_inv)
	}

	// q = 1009 test
	p0 = [][]int{
		{1, 153, 223, 642},
		{0, 943, 172, 293},
		{0, 991, 438, 411},
		{0, 527, 879, 927},
	}
	p1 = [][]int{
		{0, 149, 194, 624},
		{1, 654, 438, 968},
		{0, 587, 224, 79},
		{0, 196, 354, 819},
	}
	e_a = [][]int{
		{826, 431, 64, 368},
		{663, 225, 683, 94},
		{331, 914, 293, 0},
		{385, 442, 77, 278},
	}
	e_b_inv = [][]int{
		{471, 585, 1001, 967},
		{540, 7, 768, 888},
		{685, 162, 892, 637},
		{309, 950, 786, 346},
	}

	P = make([]*matrix.Matrix, 2)

	P[0] = matrix.New(m, n, 1009)
	P[1] = matrix.New(m, n, 1009)
	E_A = matrix.New(m, n, 1009)
	E_B_inv = matrix.New(m, n, 1009)
	for i := 0; i < P[0].M; i++ {
		for j := 0; j < P[0].N; j++ {
			P[0].Set(i, j, finiteField.NewFieldElm(p0[i][j], 1009))
			P[1].Set(i, j, finiteField.NewFieldElm(p1[i][j], 1009))
			E_A.Set(i, j, finiteField.NewFieldElm(e_a[i][j], 1009))
			E_B_inv.Set(i, j, finiteField.NewFieldElm(e_b_inv[i][j], 1009))
		}
	}
	P[0] = P[0].Transpose()
	P[1] = P[1].Transpose()

	G = MatriciesToRows(P)

	// for i := 0; i < G.M; i++ {
	// 	for j := 0; j < G.N; j++ {
	// 		n := rand.Intn(int(q))
	// 		G.Set(i, j, finiteField.NewFieldElm(n, q))
	// 	}
	// }

	a = finiteField.NewFieldElm(278, 1009)
	t.Logf("a[m-1, m-1]: %v\n", a)
	// for a.Equals(finiteField.NewFieldElm(0, q)) {
	// 	a = finiteField.NewFieldElm(rand.Intn(q), q)
	// }
	A, B_inv = Solve(G, a, m, n)
	if !A.Equals(E_A) || !B_inv.Equals(E_B_inv) {
		t.Fatalf("A: %v\nB_inv: %v", A, B_inv)
	}

	// q = 3359 test
	p0 = [][]int{
		{1, 2703, 2753, 2312},
		{0, 397, 1110, 2603},
		{0, 2062, 2831, 2029},
		{0, 1458, 1841, 403},
	}
	p1 = [][]int{
		{0, 2049, 1418, 2771},
		{1, 1800, 1861, 2709},
		{0, 3020, 1748, 2414},
		{0, 1376, 710, 2791},
	}
	e_a = [][]int{
		{1771, 3214, 64, 1970},
		{754, 3101, 2072, 2862},
		{1405, 2604, 962, 940},
		{1593, 366, 3211, 153},
	}
	e_b_inv = [][]int{
		{840, 2115, 3038, 1652},
		{2400, 232, 2390, 21},
		{1054, 342, 387, 1064},
		{22, 3073, 1213, 355},
	}

	P = make([]*matrix.Matrix, 2)

	P[0] = matrix.New(m, n, 3359)
	P[1] = matrix.New(m, n, 3359)
	E_A = matrix.New(m, n, 3359)
	E_B_inv = matrix.New(m, n, 3359)
	for i := 0; i < P[0].M; i++ {
		for j := 0; j < P[0].N; j++ {
			P[0].Set(i, j, finiteField.NewFieldElm(p0[i][j], 3359))
			P[1].Set(i, j, finiteField.NewFieldElm(p1[i][j], 3359))
			E_A.Set(i, j, finiteField.NewFieldElm(e_a[i][j], 3359))
			E_B_inv.Set(i, j, finiteField.NewFieldElm(e_b_inv[i][j], 3359))
		}
	}
	P[0] = P[0].Transpose()
	P[1] = P[1].Transpose()

	G = MatriciesToRows(P)

	// for i := 0; i < G.M; i++ {
	// 	for j := 0; j < G.N; j++ {
	// 		n := rand.Intn(int(q))
	// 		G.Set(i, j, finiteField.NewFieldElm(n, q))
	// 	}
	// }

	a = finiteField.NewFieldElm(153, 3359)
	t.Logf("a[m-1, m-1]: %v\n", a)
	// for a.Equals(finiteField.NewFieldElm(0, q)) {
	// 	a = finiteField.NewFieldElm(rand.Intn(q), q)
	// }
	A, B_inv = Solve(G, a, m, n)
	if !A.Equals(E_A) || !B_inv.Equals(E_B_inv) {
		t.Fatalf("A: %v\nB_inv: %v", A, B_inv)
	}

	// q = 4091 test
	p0 = [][]int{
		{1, 1704, 1886, 1044},
		{0, 4031, 3534, 232},
		{0, 1172, 620, 295},
		{0, 1871, 870, 346},
	}
	p1 = [][]int{
		{0, 3288, 3541, 1851},
		{1, 3332, 547, 1254},
		{0, 649, 2656, 797},
		{0, 488, 3932, 3930},
	}
	e_a = [][]int{
		{2465, 530, 2191, 2795},
		{1819, 3662, 634, 3174},
		{485, 473, 739, 3320},
		{694, 3465, 1507, 826},
	}
	e_b_inv = [][]int{
		{2887, 1721, 1770, 2966},
		{99, 3961, 240, 288},
		{276, 2957, 3710, 1119},
		{3932, 3443, 2510, 176},
	}
	a = finiteField.NewFieldElm(826, 4091)

	P = make([]*matrix.Matrix, 2)

	P[0] = matrix.New(m, n, 4091)
	P[1] = matrix.New(m, n, 4091)
	E_A = matrix.New(m, n, 4091)
	E_B_inv = matrix.New(m, n, 4091)
	for i := 0; i < P[0].M; i++ {
		for j := 0; j < P[0].N; j++ {
			P[0].Set(i, j, finiteField.NewFieldElm(p0[i][j], 4091))
			P[1].Set(i, j, finiteField.NewFieldElm(p1[i][j], 4091))
			E_A.Set(i, j, finiteField.NewFieldElm(e_a[i][j], 4091))
			E_B_inv.Set(i, j, finiteField.NewFieldElm(e_b_inv[i][j], 4091))
		}
	}
	P[0] = P[0].Transpose()
	P[1] = P[1].Transpose()

	G = MatriciesToRows(P)

	// for i := 0; i < G.M; i++ {
	// 	for j := 0; j < G.N; j++ {
	// 		n := rand.Intn(int(q))
	// 		G.Set(i, j, finiteField.NewFieldElm(n, q))
	// 	}
	// }

	t.Logf("a[m-1, m-1]: %v\n", a)
	// for a.Equals(finiteField.NewFieldElm(0, q)) {
	// 	a = finiteField.NewFieldElm(rand.Intn(q), q)
	// }
	A, B_inv = Solve(G, a, m, n)
	if !A.Equals(E_A) || !B_inv.Equals(E_B_inv) {
		t.Fatalf("A: %v\nB_inv: %v", A, B_inv)
	}

	// q = 4093 test
	p0 = [][]int{
		{1, 2424, 503, 1617},
		{0, 2969, 408, 1700},
		{0, 4033, 2346, 4024},
		{0, 2573, 3468, 3058},
	}
	p1 = [][]int{
		{0, 1190, 1263, 3475},
		{1, 1577, 2826, 1777},
		{0, 1290, 580, 3886},
		{0, 2643, 3358, 3967},
	}
	e_a = [][]int{
		{2282, 3060, 2207, 1989},
		{3307, 3469, 1807, 314},
		{3345, 962, 2727, 1805},
		{3062, 1562, 2641, 3471},
	}
	e_b_inv = [][]int{
		{3239, 3251, 2483, 2671},
		{1529, 3699, 2369, 1647},
		{3125, 1427, 2103, 3693},
		{2627, 3965, 1391, 3816},
	}
	a = finiteField.NewFieldElm(-622, 4093)

	P = make([]*matrix.Matrix, 2)

	P[0] = matrix.New(m, n, 4093)
	P[1] = matrix.New(m, n, 4093)
	E_A = matrix.New(m, n, 4093)
	E_B_inv = matrix.New(m, n, 4093)
	for i := 0; i < P[0].M; i++ {
		for j := 0; j < P[0].N; j++ {
			P[0].Set(i, j, finiteField.NewFieldElm(p0[i][j], 4093))
			P[1].Set(i, j, finiteField.NewFieldElm(p1[i][j], 4093))
			E_A.Set(i, j, finiteField.NewFieldElm(e_a[i][j], 4093))
			E_B_inv.Set(i, j, finiteField.NewFieldElm(e_b_inv[i][j], 4093))
		}
	}
	P[0] = P[0].Transpose()
	P[1] = P[1].Transpose()

	G = MatriciesToRows(P)

	// for i := 0; i < G.M; i++ {
	// 	for j := 0; j < G.N; j++ {
	// 		n := rand.Intn(int(q))
	// 		G.Set(i, j, finiteField.NewFieldElm(n, q))
	// 	}
	// }

	t.Logf("a[m-1, m-1]: %v\n", a)
	// for a.Equals(finiteField.NewFieldElm(0, q)) {
	// 	a = finiteField.NewFieldElm(rand.Intn(q), q)
	// }
	A, B_inv = Solve(G, a, m, n)
	if !A.Equals(E_A) || !B_inv.Equals(E_B_inv) {
		t.Fatalf("A: %v\nB_inv: %v", A, B_inv)
	}

	q = 4093
	n = 10
	m = 10
	k = 10

	p0 = [][]int{
		{1, 2274, 74, 1424, 3811, 3130, 3841, 1842, 2412, 3018},
		{0, 253, 3631, 739, 3441, 2043, 3088, 884, 2687, 1923},
		{0, 3269, 2858, 4067, 3571, 3178, 1350, 2380, 3330, 2668},
		{0, 3892, 334, 418, 3866, 413, 2764, 334, 3880, 1593},
		{0, 3351, 1896, 1052, 1680, 1184, 1163, 2977, 1395, 2187},
		{0, 230, 462, 1801, 1104, 1559, 202, 525, 81, 206},
		{0, 1591, 3205, 1270, 2255, 1599, 924, 3116, 2763, 1472},
		{0, 2620, 2275, 4021, 770, 1504, 2456, 443, 3168, 3566},
		{0, 3900, 1852, 2914, 1220, 339, 1526, 2145, 2762, 1731},
		{0, 1879, 3659, 128, 4075, 1921, 170, 3053, 459, 1534},
	}
	p1 = [][]int{
		{0, 1624, 1882, 2478, 3318, 115, 873, 2738, 15, 3485},
		{1, 2902, 1579, 2793, 3927, 1281, 2166, 2095, 534, 3175},
		{0, 3079, 1729, 3591, 3742, 214, 3187, 1305, 727, 1110},
		{0, 3369, 2351, 865, 2422, 2294, 1933, 3869, 144, 2456},
		{0, 1378, 2034, 2680, 3215, 2250, 3741, 4044, 3979, 3114},
		{0, 512, 1066, 568, 916, 864, 3824, 1972, 3723, 3691},
		{0, 2531, 1511, 4037, 1123, 1461, 3227, 2911, 1613, 1033},
		{0, 3044, 3485, 1029, 3431, 4040, 1117, 1479, 1818, 522},
		{0, 1968, 2112, 3781, 453, 1832, 1055, 3795, 138, 2204},
		{0, 2474, 2293, 352, 2901, 2615, 2243, 1784, 2558, 752},
	}
	e_a = [][]int{
		{2125, 3215, 245, 2841, 1994, 1453, 474, 1733, 145, 4060},
		{3748, 2777, 3221, 722, 989, 3853, 3625, 3234, 2531, 3689},
		{838, 1153, 732, 3952, 3627, 926, 3009, 401, 160, 68},
		{1603, 4025, 1281, 2777, 1938, 833, 3615, 3341, 396, 3721},
		{1182, 293, 1070, 1567, 3430, 3530, 3381, 3195, 145, 3554},
		{3286, 1278, 2250, 3611, 1581, 2767, 166, 1009, 693, 2526},
		{1633, 1833, 685, 1404, 1140, 2533, 77, 1117, 2207, 3243},
		{2264, 2785, 3697, 2184, 3193, 1874, 1085, 2435, 1730, 3288},
		{3621, 1853, 1469, 634, 1193, 2710, 308, 407, 2002, 3161},
		{1476, 1258, 2633, 1675, 575, 3899, 514, 3991, 3942, 326},
	}
	e_b_inv = [][]int{
		{670, 956, 676, 1611, 2383, 2376, 2647, 2816, 1697, 882},
		{1547, 1012, 3956, 199, 2949, 569, 1836, 1302, 3523, 626},
		{3442, 1587, 1890, 3401, 3827, 3740, 2758, 135, 4036, 1877},
		{1950, 3331, 3708, 2033, 1349, 3243, 2412, 2063, 621, 1821},
		{1864, 2804, 961, 2050, 1058, 3671, 1656, 1311, 2196, 2410},
		{2823, 722, 2087, 2597, 37, 2185, 3949, 1234, 2811, 2839},
		{3708, 284, 614, 436, 3575, 1543, 314, 1561, 2457, 3633},
		{2356, 3867, 1315, 147, 2351, 1814, 1832, 3188, 3821, 3965},
		{1933, 2135, 944, 797, 38, 166, 3825, 656, 2791, 3994},
		{2089, 1434, 2218, 798, 2553, 3395, 730, 2935, 202, 2634},
	}
	a = finiteField.NewFieldElm(326, q)

	P[0] = matrix.New(m, n, q)
	P[1] = matrix.New(m, n, q)
	E_A = matrix.New(m, n, q)
	E_B_inv = matrix.New(m, n, q)
	for i := 0; i < P[0].M; i++ {
		for j := 0; j < P[0].N; j++ {
			P[0].Set(i, j, finiteField.NewFieldElm(p0[i][j], q))
			P[1].Set(i, j, finiteField.NewFieldElm(p1[i][j], q))
			E_A.Set(i, j, finiteField.NewFieldElm(e_a[i][j], q))
			E_B_inv.Set(i, j, finiteField.NewFieldElm(e_b_inv[i][j], q))
		}
	}
	P[0] = P[0].Transpose()
	P[1] = P[1].Transpose()

	G = MatriciesToRows(P)

	A, B_inv = Solve(G, a, m, n)
	if !A.Equals(E_A) || !B_inv.Equals(E_B_inv) {
		t.Fatalf("A: %v\nB_inv: %v", A, B_inv)
	}

	n = 20
	m = 20
	k = 20

	p0 = [][]int{
		{1, 3501, 1456, 3560, 692, 1694, 32, 3821, 1631, 242, 3334, 846, 2352, 3239, 2552, 3976, 308, 4055, 4074, 533},
		{0, 2819, 3847, 1730, 2987, 1315, 3021, 4083, 3, 2155, 1882, 1722, 1531, 2892, 4090, 172, 2862, 1800, 1365, 767},
		{0, 2208, 605, 3752, 2251, 1038, 2893, 750, 2655, 295, 2438, 63, 2307, 3871, 3147, 3466, 3743, 1157, 1574, 2034},
		{0, 2321, 934, 874, 3591, 1546, 3052, 631, 2670, 1077, 2282, 2798, 3408, 2546, 481, 3754, 2395, 547, 3547, 4060},
		{0, 2385, 4033, 3748, 1013, 1339, 2859, 3882, 3087, 2163, 2781, 3847, 1451, 1928, 2311, 935, 2154, 2325, 2274, 3942},
		{0, 1975, 1581, 3112, 2097, 3498, 3875, 448, 938, 2838, 1747, 3593, 791, 3458, 653, 2468, 3508, 1129, 1631, 2295},
		{0, 1052, 1969, 1216, 2132, 2770, 1821, 901, 772, 810, 1506, 2367, 152, 3879, 799, 3942, 2527, 1138, 1558, 691},
		{0, 3701, 3528, 3710, 2775, 3844, 2588, 2870, 3421, 2698, 3084, 1557, 386, 3527, 3797, 3802, 2360, 3375, 3943, 867},
		{0, 2973, 970, 4050, 921, 1083, 1196, 2503, 2589, 3301, 2183, 1288, 2689, 561, 2721, 3024, 2721, 1291, 800, 3133},
		{0, 3903, 1910, 355, 2001, 3598, 2903, 1806, 1118, 2700, 1261, 1012, 1199, 1964, 1863, 3913, 1063, 3339, 832, 2255},
		{0, 2734, 1736, 3309, 3994, 3044, 4085, 518, 3630, 3706, 2886, 3942, 2395, 1925, 3073, 14, 3657, 3886, 3042, 3755},
		{0, 3931, 3114, 2914, 3793, 2554, 3965, 2469, 458, 4065, 1284, 2713, 4057, 1922, 1888, 3972, 2065, 3940, 2272, 3388},
		{0, 995, 3659, 1021, 157, 495, 3515, 1191, 210, 641, 1299, 3870, 432, 380, 3204, 876, 1467, 3956, 2455, 3867},
		{0, 1230, 210, 1600, 1934, 494, 2656, 3819, 1437, 2637, 3042, 3557, 328, 503, 14, 442, 2632, 1863, 4043, 2377},
		{0, 2844, 2206, 2266, 2434, 355, 2208, 2411, 2159, 2497, 2097, 3917, 912, 2324, 2772, 570, 338, 7, 3611, 1550},
		{0, 736, 500, 1207, 817, 768, 1152, 746, 1114, 693, 286, 1052, 3171, 249, 28, 2901, 3812, 3987, 6, 3114},
		{0, 1095, 2094, 2419, 3993, 3404, 3156, 2238, 4007, 2679, 3861, 994, 214, 2777, 1937, 3484, 1785, 3041, 1253, 3396},
		{0, 3273, 2240, 2932, 1449, 3835, 1319, 1946, 3570, 1033, 1084, 1286, 3297, 3774, 1675, 69, 1850, 2205, 2363, 2338},
		{0, 1844, 1200, 817, 3673, 1099, 1587, 3778, 1280, 163, 918, 3113, 585, 762, 3237, 578, 2309, 1875, 1706, 1731},
		{0, 756, 3533, 1286, 1766, 1913, 1668, 3063, 888, 1385, 1457, 1116, 4006, 3951, 760, 2876, 3175, 2550, 2915, 243},
	}
	p1 = [][]int{
		{0, 1730, 1054, 1858, 4010, 368, 3467, 2624, 1550, 1666, 97, 829, 1812, 2831, 1870, 2428, 1017, 1292, 1558, 4021},
		{1, 1121, 460, 3100, 2809, 2194, 2104, 2891, 2351, 0, 1639, 3650, 834, 2838, 107, 1707, 4048, 1711, 1498, 274},
		{0, 3013, 2721, 340, 2113, 1139, 3884, 2680, 1069, 115, 2524, 3603, 428, 2960, 781, 240, 2530, 47, 3849, 1706},
		{0, 3317, 2150, 1200, 2571, 192, 499, 989, 3731, 3412, 1003, 3296, 1983, 3170, 1363, 1384, 3635, 953, 1293, 401},
		{0, 2875, 3287, 600, 3440, 160, 1874, 3935, 3056, 25, 42, 1028, 3254, 3019, 710, 3617, 35, 1713, 2849, 3640},
		{0, 1796, 1707, 235, 1111, 2364, 494, 3622, 1538, 1794, 2435, 3301, 2192, 2283, 2112, 3998, 155, 3641, 443, 3393},
		{0, 1888, 63, 2804, 2424, 1561, 3851, 210, 1321, 1298, 92, 3924, 3048, 252, 3393, 447, 1, 2021, 3326, 799},
		{0, 569, 3103, 3593, 2544, 1292, 1784, 2794, 2200, 2020, 2250, 2752, 3613, 2893, 1281, 2084, 3415, 2257, 571, 3789},
		{0, 1891, 3179, 651, 3946, 2802, 819, 1367, 1296, 3347, 1206, 262, 2867, 1287, 1204, 1546, 613, 1591, 2799, 2655},
		{0, 1460, 950, 482, 3182, 2170, 4, 3847, 3080, 1868, 1074, 316, 2093, 3748, 854, 2091, 710, 4042, 1229, 3830},
		{0, 890, 3106, 1383, 2831, 1784, 131, 2962, 1231, 1484, 2271, 477, 739, 1941, 2771, 3688, 1165, 1291, 3876, 343},
		{0, 3211, 1308, 3576, 2063, 264, 3817, 1893, 539, 395, 2252, 354, 469, 1259, 2556, 1336, 3533, 2151, 1951, 362},
		{0, 1760, 399, 3290, 2331, 3889, 3178, 263, 3659, 3633, 3106, 3959, 3450, 2734, 3715, 4005, 3971, 4019, 1122, 1045},
		{0, 3511, 2548, 3668, 3546, 976, 3212, 714, 1745, 1936, 1867, 1060, 2263, 2085, 2668, 3022, 3917, 226, 2142, 1609},
		{0, 533, 1407, 3704, 3554, 2294, 2267, 211, 3444, 3157, 363, 1951, 4010, 3404, 4078, 3846, 109, 1516, 2780, 1660},
		{0, 1094, 2739, 2804, 863, 1325, 1101, 196, 1505, 1851, 3380, 874, 1020, 1241, 347, 774, 3718, 265, 2617, 1090},
		{0, 594, 2257, 1269, 2005, 2446, 565, 2876, 2313, 2819, 713, 405, 2734, 2526, 1337, 876, 1667, 2595, 1986, 992},
		{0, 1427, 3556, 2943, 2728, 3254, 2956, 2444, 1006, 4060, 407, 1008, 897, 2812, 3229, 3297, 3329, 2060, 1945, 1104},
		{0, 1318, 3429, 3865, 406, 581, 1139, 1550, 2270, 2004, 1721, 1268, 3265, 1837, 447, 256, 1136, 2754, 3577, 1041},
		{0, 2966, 1242, 1588, 2021, 1830, 3317, 3809, 1586, 3344, 91, 3146, 738, 298, 1453, 1599, 3839, 2381, 462, 2056},
	}
	e_a = [][]int{
		{1299, 1637, 606, 810, 3116, 3206, 3622, 886, 3969, 479, 991, 2322, 1887, 3666, 750, 3253, 804, 2928, 1114, 2251},
		{2383, 3194, 1766, 2144, 462, 1701, 2471, 3895, 2370, 1273, 749, 2637, 3930, 2742, 2990, 3288, 3888, 991, 2010, 521},
		{399, 1488, 324, 781, 3669, 911, 2391, 661, 1132, 1645, 3623, 773, 3880, 49, 3974, 3960, 48, 3322, 2842, 1556},
		{1659, 1599, 531, 3930, 2064, 284, 1999, 1591, 1692, 1332, 1884, 2301, 675, 2072, 868, 1145, 3289, 3588, 2720, 1774},
		{1808, 3228, 138, 260, 4085, 2808, 3487, 402, 2564, 735, 1645, 1177, 208, 3551, 3081, 3869, 106, 2011, 2478, 2369},
		{14, 2062, 2549, 3264, 1973, 3539, 3352, 3282, 2518, 3224, 1296, 3788, 3941, 1021, 6, 231, 4042, 809, 3047, 2353},
		{401, 1830, 3611, 137, 250, 3704, 1828, 2165, 3973, 2243, 955, 2807, 3899, 2275, 785, 662, 442, 2338, 1298, 3250},
		{3355, 3491, 2520, 3013, 1112, 3497, 982, 1458, 396, 2406, 1856, 1157, 1567, 1593, 534, 340, 2176, 1836, 2478, 2824},
		{609, 2228, 1540, 1607, 446, 1872, 3034, 3969, 2291, 2955, 3469, 947, 2846, 2173, 1311, 3421, 2271, 1181, 3245, 2711},
		{1360, 2699, 1762, 313, 2422, 3672, 3711, 4038, 1775, 1056, 3492, 2134, 2560, 4003, 1741, 1064, 2647, 4030, 3944, 1637},
		{1035, 1195, 1137, 3774, 558, 942, 2847, 3378, 1644, 802, 1412, 1148, 1697, 1940, 1387, 1206, 1489, 638, 1901, 2591},
		{1680, 3441, 2546, 978, 4073, 848, 210, 1528, 3482, 2665, 3948, 1911, 1209, 778, 869, 430, 2950, 1140, 1360, 3713},
		{3930, 3389, 527, 3520, 3921, 3464, 1053, 721, 2969, 3416, 3420, 895, 3382, 1951, 1946, 3325, 540, 1174, 1803, 3902},
		{1227, 3060, 2514, 3805, 1437, 464, 1231, 902, 963, 2378, 714, 240, 3495, 3253, 1860, 1589, 1924, 3003, 3845, 3142},
		{183, 3887, 3822, 2396, 1127, 581, 2332, 4031, 659, 3040, 2009, 2578, 2118, 3575, 321, 1949, 2251, 729, 3627, 3908},
		{1842, 3736, 968, 2125, 3692, 2462, 3774, 2099, 502, 1076, 3873, 75, 987, 2385, 177, 2778, 277, 726, 97, 1766},
		{957, 365, 3304, 2284, 474, 3399, 688, 2390, 646, 3850, 3229, 949, 937, 2411, 1582, 3452, 3764, 321, 3025, 3676},
		{331, 2577, 1252, 2941, 678, 2022, 3732, 2375, 4028, 2963, 1917, 357, 313, 1068, 2525, 3968, 1779, 3404, 3426, 1814},
		{1656, 1953, 1873, 1192, 3807, 3551, 2987, 1676, 4030, 3706, 2506, 1248, 2160, 3861, 1333, 357, 406, 992, 2690, 693},
		{2006, 2355, 1001, 3260, 1179, 2670, 58, 131, 3467, 3174, 1472, 2833, 2984, 1723, 604, 3668, 789, 2730, 3505, 2754},
	}
	e_b_inv = [][]int{
		{919, 3216, 2158, 72, 331, 925, 1682, 1312, 3714, 1391, 360, 2494, 3597, 2192, 2973, 161, 2716, 4046, 2715, 2515},
		{1859, 2173, 746, 970, 3804, 1895, 2391, 2569, 3202, 759, 525, 1450, 3019, 3781, 2904, 3945, 178, 2325, 1901, 1730},
		{70, 1044, 2381, 2497, 3202, 3221, 1730, 362, 3691, 3435, 971, 16, 1667, 3072, 474, 828, 2094, 1783, 3738, 334},
		{1982, 2878, 348, 2775, 1205, 309, 2228, 2533, 1292, 1464, 3139, 1429, 1213, 3515, 1852, 3042, 3042, 3207, 3646, 2343},
		{3619, 1416, 3000, 3034, 594, 1032, 3747, 2827, 2229, 930, 3140, 3582, 329, 1526, 2243, 3523, 3171, 1703, 1635, 8},
		{715, 3615, 2858, 254, 320, 3017, 395, 2859, 1071, 3556, 375, 292, 3115, 2123, 409, 3670, 3942, 2936, 3952, 3981},
		{3335, 3723, 3220, 1061, 26, 3998, 1333, 7, 3247, 2855, 707, 1688, 4025, 2314, 1662, 943, 4015, 1866, 1879, 1779},
		{1535, 605, 2303, 1117, 2840, 2085, 3294, 2129, 3996, 4013, 3312, 1596, 964, 4037, 535, 1498, 1538, 1705, 57, 800},
		{1009, 366, 1585, 813, 1631, 446, 3275, 3582, 2778, 2306, 1919, 1291, 2122, 2553, 793, 2190, 3247, 2640, 3202, 2430},
		{3211, 814, 1467, 2920, 2714, 3951, 1852, 95, 1207, 3506, 3727, 1868, 956, 2366, 128, 903, 1507, 2670, 3596, 1236},
		{3248, 3954, 3770, 1808, 572, 2287, 2368, 572, 782, 1822, 3894, 365, 2854, 744, 2422, 481, 580, 3978, 3568, 2577},
		{1044, 1070, 303, 2032, 1959, 79, 3226, 3721, 73, 1197, 162, 1729, 575, 3360, 3128, 1684, 2719, 2564, 2757, 1566},
		{3233, 747, 2380, 2300, 3689, 261, 3754, 3589, 3324, 3612, 221, 4069, 2946, 1317, 2602, 1565, 3528, 2477, 597, 11},
		{3569, 652, 1265, 3700, 732, 2031, 3639, 3755, 2408, 1172, 2633, 1194, 2090, 1831, 8, 1304, 2961, 3640, 3187, 2356},
		{2974, 2036, 3244, 2582, 2826, 415, 3857, 1489, 2878, 3881, 324, 2373, 1993, 2318, 2494, 2583, 2884, 3859, 2213, 3376},
		{3972, 1664, 2749, 1228, 3598, 1481, 2851, 2664, 1234, 945, 1202, 3536, 2340, 644, 654, 3994, 1956, 3141, 724, 611},
		{968, 1494, 1023, 1981, 4067, 2255, 1292, 1565, 4043, 49, 579, 1264, 2318, 2183, 2855, 850, 656, 698, 2286, 1546},
		{2860, 2272, 3210, 3982, 1775, 1234, 2202, 1555, 907, 3949, 10, 2371, 249, 458, 2581, 1243, 2349, 855, 3399, 2125},
		{798, 3236, 2904, 3446, 1923, 2632, 1498, 1331, 2006, 1959, 3489, 2607, 850, 163, 3435, 787, 3771, 2139, 26, 3765},
		{2990, 1765, 377, 3356, 130, 4018, 2881, 455, 2814, 4091, 3467, 1125, 3383, 1586, 1698, 3078, 2741, 3223, 1102, 659},
	}
	a = finiteField.NewFieldElm(2754, q)

	P[0] = matrix.New(m, n, q)
	P[1] = matrix.New(m, n, q)
	E_A = matrix.New(m, n, q)
	E_B_inv = matrix.New(m, n, q)
	for i := 0; i < P[0].M; i++ {
		for j := 0; j < P[0].N; j++ {
			P[0].Set(i, j, finiteField.NewFieldElm(p0[i][j], q))
			P[1].Set(i, j, finiteField.NewFieldElm(p1[i][j], q))
			E_A.Set(i, j, finiteField.NewFieldElm(e_a[i][j], q))
			E_B_inv.Set(i, j, finiteField.NewFieldElm(e_b_inv[i][j], q))
		}
	}
	P[0] = P[0].Transpose()
	P[1] = P[1].Transpose()

	G = MatriciesToRows(P)

	A, B_inv = Solve(G, a, m, n)
	if !A.Equals(E_A) || !B_inv.Equals(E_B_inv) {
		t.Fatalf("A: %v\nB_inv: %v", A, B_inv)
	}

	n = 30
	m = 30
	k = 30

	p0 = [][]int{
		{1, 3289, 1804, 3783, 2899, 577, 864, 2826, 2542, 3110, 1903, 452, 3409, 1571, 1668, 2963, 833, 3913, 3951, 542, 2230, 632, 3048, 3744, 858, 1352, 544, 949, 3202, 1005},
		{0, 1898, 1390, 3179, 2128, 2811, 3399, 3277, 102, 2462, 3731, 4081, 3645, 693, 158, 2775, 350, 3592, 2862, 1150, 484, 568, 2344, 3422, 2989, 1424, 2981, 2749, 1398, 3967},
		{0, 3013, 346, 125, 1482, 3775, 2443, 1918, 826, 291, 2667, 1820, 651, 3785, 2780, 2422, 1445, 2191, 2566, 1927, 661, 1333, 1220, 3896, 829, 1495, 3741, 1524, 932, 987},
		{0, 389, 2146, 2099, 5, 1383, 513, 1345, 4060, 2229, 906, 293, 3021, 2420, 3790, 3545, 3600, 733, 402, 241, 1211, 911, 536, 202, 3929, 3245, 3382, 1286, 1158, 3939},
		{0, 860, 136, 1992, 2149, 943, 2605, 4014, 664, 1984, 3255, 353, 1814, 2998, 2715, 2976, 2678, 3621, 3197, 1994, 1375, 370, 889, 1570, 2555, 2404, 3399, 3783, 1250, 3720},
		{0, 747, 1435, 2549, 1849, 698, 3828, 2046, 1084, 2575, 3110, 2228, 1689, 51, 3510, 1566, 1731, 1656, 441, 1489, 2769, 3289, 2926, 2894, 2269, 2142, 2398, 2020, 1811, 583},
		{0, 2529, 3534, 136, 273, 1707, 3553, 3198, 1270, 1602, 3447, 1604, 579, 3379, 3084, 4028, 870, 2565, 4026, 1732, 101, 473, 232, 2449, 2628, 2408, 3946, 614, 1815, 411},
		{0, 212, 3634, 534, 3153, 1865, 1923, 3560, 1291, 1984, 169, 512, 3321, 2265, 1705, 1397, 3863, 2234, 1266, 18, 822, 2992, 2822, 640, 1704, 2515, 1716, 2588, 2917, 346},
		{0, 464, 2172, 3020, 1636, 3710, 1203, 3547, 611, 3250, 1044, 2420, 3186, 539, 2636, 1708, 2735, 1778, 2094, 432, 3358, 844, 3902, 1820, 399, 3971, 3466, 2786, 2799, 835},
		{0, 1149, 1802, 2999, 1048, 2029, 535, 1656, 2191, 995, 1811, 2021, 3146, 2055, 2874, 4016, 320, 626, 3091, 1619, 1752, 208, 973, 1187, 2033, 749, 1682, 706, 3617, 1121},
		{0, 3719, 2150, 3800, 3311, 2420, 3645, 128, 1232, 3527, 3504, 3525, 760, 3089, 1993, 1357, 3510, 1486, 1288, 687, 795, 1693, 1336, 1955, 2206, 2944, 1579, 1959, 1527, 3968},
		{0, 453, 2551, 551, 2804, 1959, 3081, 3940, 561, 1523, 1011, 445, 340, 3453, 1502, 2861, 1416, 3964, 3075, 2870, 2109, 3842, 2264, 2760, 585, 2082, 3559, 225, 75, 682},
		{0, 550, 122, 84, 95, 232, 3355, 2120, 676, 968, 3025, 1644, 737, 961, 662, 1954, 2776, 3668, 2768, 2960, 1515, 3784, 2523, 3575, 619, 697, 3636, 2312, 3456, 4068},
		{0, 2647, 2763, 4021, 1069, 2816, 3816, 2594, 2699, 3938, 3900, 2530, 1797, 611, 1173, 3488, 3421, 1196, 449, 1805, 2993, 1572, 2216, 1527, 2178, 1336, 3598, 3356, 652, 1138},
		{0, 2053, 1254, 3073, 2425, 822, 453, 1471, 1564, 2435, 1395, 1539, 1948, 811, 2856, 2056, 1320, 3463, 1817, 1663, 2230, 2806, 3269, 969, 148, 2009, 3957, 816, 75, 2952},
		{0, 605, 1364, 189, 3494, 889, 177, 2599, 2918, 3343, 2930, 937, 3060, 1333, 2751, 928, 3607, 2202, 3384, 2314, 31, 1540, 3865, 1152, 3526, 3361, 3209, 2543, 292, 1595},
		{0, 3921, 2178, 2085, 1029, 2884, 1490, 835, 1190, 2439, 3790, 1294, 381, 2807, 1180, 2787, 1065, 1504, 2727, 1520, 3679, 3199, 957, 1324, 2754, 1804, 3088, 3671, 1480, 1495},
		{0, 1714, 3900, 1941, 1261, 2182, 3049, 924, 1674, 1207, 2576, 549, 3996, 3272, 2969, 1198, 563, 1767, 3921, 2118, 3084, 4006, 2991, 3716, 1093, 3087, 2179, 2567, 2127, 1349},
		{0, 2912, 58, 3666, 411, 1275, 2312, 425, 3517, 1733, 108, 4020, 587, 1937, 1542, 1413, 1330, 902, 2747, 1284, 1839, 4010, 3343, 668, 3707, 3091, 896, 3348, 789, 254},
		{0, 310, 2652, 1126, 2663, 2362, 3541, 4046, 3170, 1420, 1470, 3440, 2120, 3648, 711, 3270, 2085, 1363, 542, 2138, 3308, 2658, 210, 3110, 899, 577, 1664, 2641, 897, 1214},
		{0, 1800, 1894, 2948, 2116, 2497, 2520, 433, 2825, 385, 363, 1375, 2550, 599, 1855, 860, 421, 1650, 1919, 4050, 3535, 37, 2215, 3863, 3553, 563, 257, 2199, 577, 2796},
		{0, 3167, 523, 769, 146, 3930, 3325, 3606, 73, 2436, 3313, 1023, 98, 4039, 1707, 1921, 414, 1247, 63, 200, 3292, 2965, 1484, 3795, 1726, 3843, 2573, 2381, 3216, 1510},
		{0, 1444, 2877, 1141, 3926, 3496, 3162, 2102, 1766, 248, 1286, 3607, 3054, 3782, 1078, 1649, 816, 151, 3696, 697, 1107, 731, 494, 1003, 1429, 2098, 744, 1470, 3482, 1232},
		{0, 2020, 1083, 1846, 851, 2338, 3946, 3831, 1728, 1659, 3358, 1048, 429, 3782, 1044, 2773, 1896, 2208, 2958, 3570, 2757, 4007, 3110, 754, 1933, 3262, 627, 675, 197, 793},
		{0, 3555, 3305, 1207, 657, 2638, 3473, 2698, 3192, 2199, 3044, 3110, 3825, 1156, 2478, 2602, 793, 272, 346, 3454, 1456, 1983, 1085, 2606, 2878, 1658, 1176, 3115, 2834, 2422},
		{0, 1592, 3674, 2543, 3557, 3340, 1987, 3158, 2268, 1405, 1319, 1792, 2659, 2303, 3361, 1761, 2032, 3163, 675, 610, 3389, 1231, 367, 858, 3172, 3379, 2251, 3030, 1160, 1336},
		{0, 537, 1653, 1050, 3563, 1344, 1053, 2170, 3038, 2764, 308, 2399, 3054, 2344, 2801, 1128, 3983, 3950, 3411, 3673, 3484, 2243, 2817, 962, 3527, 3842, 2088, 1633, 2756, 1288},
		{0, 1576, 3238, 1230, 77, 1345, 545, 3535, 2300, 2465, 2797, 881, 3544, 2820, 3387, 3324, 2723, 2073, 385, 2308, 294, 2882, 2214, 3413, 1994, 3290, 2825, 1508, 2392, 3933},
		{0, 291, 3913, 1582, 424, 1025, 2103, 3975, 3620, 119, 1229, 3090, 875, 2559, 3066, 1432, 204, 2778, 1886, 3332, 369, 2782, 1074, 66, 1643, 3658, 3918, 3235, 3079, 2455},
		{0, 729, 3499, 191, 130, 2961, 688, 1133, 414, 3994, 1900, 273, 1631, 3943, 429, 3979, 3596, 3010, 1230, 3206, 1317, 1513, 2064, 2653, 2507, 372, 75, 1255, 599, 817},
	}
	p1 = [][]int{
		{0, 1194, 661, 3295, 3464, 1487, 3565, 161, 585, 3524, 1382, 791, 3150, 11, 1236, 1180, 1689, 2117, 153, 3632, 1499, 1690, 2257, 3617, 2839, 3553, 3714, 1021, 3773, 4049},
		{1, 41, 1112, 919, 2221, 1574, 2290, 2533, 2409, 3465, 2223, 3476, 625, 1228, 2213, 763, 101, 2427, 3175, 1725, 3418, 3928, 1579, 3981, 2313, 3408, 702, 1352, 3021, 1043},
		{0, 4079, 3930, 1240, 3933, 1601, 470, 2485, 990, 3197, 537, 1707, 1552, 1993, 2319, 3941, 3960, 3778, 1052, 297, 2694, 743, 2287, 3688, 787, 3948, 573, 3294, 494, 1779},
		{0, 2575, 2859, 2850, 1000, 2430, 3956, 1932, 549, 2574, 2212, 912, 3692, 3430, 1559, 3785, 3328, 770, 1880, 942, 3232, 3175, 1087, 3424, 1866, 2756, 1318, 3575, 2542, 2784},
		{0, 1619, 2685, 2142, 942, 2620, 2328, 532, 1763, 39, 3009, 2908, 1917, 2842, 860, 3303, 3027, 332, 427, 748, 767, 88, 3367, 595, 2574, 2327, 520, 2530, 1389, 2690},
		{0, 3405, 2009, 3743, 2308, 113, 401, 2237, 1127, 1591, 2564, 2630, 2098, 1127, 1721, 1098, 2575, 257, 1175, 1785, 2673, 2607, 3245, 2571, 3301, 3303, 2562, 1578, 2893, 2441},
		{0, 1273, 3050, 720, 2219, 3220, 3660, 3923, 2748, 539, 2442, 423, 27, 693, 683, 744, 881, 3031, 1131, 484, 394, 1163, 2241, 55, 3621, 2313, 3933, 2796, 952, 25},
		{0, 1324, 3991, 2312, 57, 675, 735, 93, 92, 2656, 953, 380, 1268, 2206, 3945, 3870, 1602, 422, 2202, 2764, 565, 1588, 1448, 3183, 65, 127, 1779, 3512, 2750, 1581},
		{0, 3910, 3350, 354, 521, 1509, 2381, 885, 3557, 3883, 3046, 1551, 2198, 60, 3941, 1023, 1657, 2545, 1279, 1119, 2205, 813, 729, 280, 76, 51, 589, 1901, 414, 766},
		{0, 2945, 2663, 1175, 3974, 175, 155, 50, 593, 3802, 2292, 512, 1726, 788, 1106, 244, 3055, 2498, 2035, 3020, 3118, 484, 3260, 134, 1230, 161, 3534, 2275, 3297, 1932},
		{0, 3987, 354, 2231, 1022, 981, 555, 1408, 3532, 1603, 460, 1481, 2603, 3615, 2333, 1798, 1834, 2138, 1586, 1961, 749, 2965, 1256, 203, 1488, 1431, 1030, 1956, 970, 2381},
		{0, 243, 2372, 1843, 4033, 2133, 1315, 487, 2284, 3215, 393, 98, 3806, 3405, 3610, 1133, 1697, 767, 3569, 2553, 423, 2503, 107, 90, 2944, 3310, 391, 1676, 74, 2781},
		{0, 219, 1758, 1016, 84, 2476, 1859, 2845, 4071, 962, 1278, 2523, 3581, 1927, 3697, 3995, 1965, 3791, 2455, 1369, 2511, 3277, 2854, 1943, 1805, 3636, 424, 3904, 1193, 2531},
		{0, 2761, 789, 2990, 1039, 2617, 725, 2950, 2413, 908, 980, 3392, 3473, 4040, 3261, 2520, 1064, 2986, 3309, 3452, 2632, 1874, 3948, 671, 183, 2611, 2176, 2573, 1094, 2585},
		{0, 3003, 1421, 2311, 3369, 3602, 3134, 412, 288, 3119, 1947, 3904, 260, 3990, 2705, 2408, 3520, 2791, 2773, 1022, 1643, 2686, 1954, 2907, 3381, 602, 2983, 2955, 1192, 1837},
		{0, 3300, 3687, 206, 2598, 3356, 3281, 330, 177, 3406, 1506, 684, 3451, 4008, 1318, 1821, 3785, 1646, 1961, 835, 829, 87, 1182, 1189, 2120, 2262, 3750, 3508, 2273, 557},
		{0, 484, 2264, 109, 1692, 1796, 846, 3003, 2991, 2578, 735, 4085, 1509, 2920, 3217, 3321, 1698, 2009, 318, 3720, 3780, 3800, 3479, 1945, 3875, 2729, 2151, 1089, 1647, 237},
		{0, 499, 2685, 86, 525, 3021, 3345, 3065, 2356, 1223, 2252, 3450, 1196, 2490, 3754, 3644, 2249, 872, 934, 1881, 3631, 10, 616, 945, 1725, 3761, 3190, 1839, 2486, 2276},
		{0, 881, 4052, 3900, 2680, 4071, 1003, 3185, 4064, 2576, 1767, 2590, 3380, 617, 1799, 1508, 580, 565, 1613, 969, 2081, 3823, 3334, 1504, 3003, 1327, 1756, 3116, 325, 753},
		{0, 3912, 1946, 3865, 3638, 853, 105, 2613, 348, 3400, 2232, 1292, 4002, 1259, 1294, 3395, 2782, 180, 2652, 2483, 168, 1026, 2885, 1165, 4066, 2839, 628, 603, 3997, 176},
		{0, 343, 2372, 3051, 3574, 4076, 2449, 3978, 132, 1923, 3382, 1263, 929, 818, 3669, 3087, 2685, 2898, 524, 3821, 3812, 3988, 2765, 316, 210, 1990, 2149, 2851, 2186, 418},
		{0, 3129, 1711, 2652, 273, 1061, 117, 674, 1261, 3319, 4, 1517, 4070, 225, 595, 2423, 1520, 1767, 2393, 3839, 3196, 546, 52, 2600, 23, 1377, 653, 1495, 1064, 1731},
		{0, 913, 2860, 209, 1342, 3638, 1945, 3392, 1387, 1404, 701, 2896, 688, 2, 2145, 2450, 1131, 2368, 1872, 3251, 872, 7, 3341, 2517, 2996, 3942, 1179, 1619, 3354, 727},
		{0, 348, 3311, 55, 3527, 3936, 1827, 2031, 3308, 2477, 1558, 3679, 394, 803, 2427, 1743, 1798, 1130, 2455, 2505, 843, 197, 2341, 1762, 1844, 3022, 466, 2520, 301, 1090},
		{0, 2991, 3028, 874, 3740, 2236, 3369, 3527, 2969, 1426, 2619, 1704, 4033, 2255, 230, 3396, 526, 1162, 2983, 545, 306, 1858, 3643, 184, 1112, 2641, 805, 827, 3488, 3985},
		{0, 1224, 2895, 413, 955, 3729, 3541, 1879, 3132, 3940, 2502, 2734, 3450, 3314, 1763, 2674, 3927, 1307, 978, 4025, 2780, 360, 66, 3458, 3944, 2983, 331, 2894, 1701, 842},
		{0, 623, 1710, 1620, 2253, 1394, 1890, 1744, 1189, 424, 2507, 3312, 729, 294, 226, 3559, 1275, 2312, 3488, 2338, 1906, 2870, 965, 3409, 517, 1582, 611, 2137, 183, 4074},
		{0, 228, 673, 471, 1438, 4052, 2732, 3681, 40, 1289, 3020, 793, 2175, 2041, 459, 860, 2079, 3955, 1637, 3050, 2067, 3202, 3316, 4010, 2997, 3229, 1970, 3551, 589, 2666},
		{0, 343, 837, 1932, 2430, 2799, 2433, 716, 3953, 1929, 332, 2349, 3753, 866, 782, 534, 3251, 527, 98, 4044, 1036, 1937, 1817, 3582, 2606, 1398, 1864, 3232, 964, 1723},
		{0, 1052, 763, 1415, 1691, 364, 2700, 1166, 1704, 1312, 751, 142, 1508, 3096, 2441, 974, 3647, 2473, 3455, 3609, 4068, 976, 1781, 2640, 1256, 2068, 1760, 3269, 2738, 3495},
	}
	e_a = [][]int{
		{1637, 2652, 1391, 2947, 2263, 3403, 558, 2165, 1615, 2284, 2086, 3207, 1303, 716, 841, 1153, 2950, 113, 3687, 1197, 3705, 1115, 1176, 1667, 2384, 3351, 251, 757, 256, 910},
		{3536, 2860, 1925, 2342, 1570, 1029, 2116, 3554, 99, 2836, 462, 1340, 2987, 3698, 1722, 2006, 3927, 178, 2592, 903, 2987, 1493, 922, 3430, 1163, 661, 945, 3636, 3773, 1215},
		{3740, 192, 2724, 2890, 1533, 61, 3921, 1694, 2950, 266, 4064, 3317, 446, 1961, 11, 1744, 879, 148, 900, 1378, 1262, 392, 2181, 88, 787, 2900, 2936, 3260, 3417, 3446},
		{2214, 3666, 1587, 4081, 1445, 2103, 1309, 1470, 3445, 3089, 1695, 2321, 1133, 3078, 881, 2907, 35, 3579, 1720, 214, 1675, 2183, 672, 2884, 4043, 3100, 1267, 2723, 1190, 3623},
		{214, 371, 1655, 740, 1580, 3469, 1402, 4091, 523, 2218, 1808, 3456, 1884, 2678, 176, 1228, 219, 1474, 268, 468, 1807, 1221, 3606, 702, 2252, 2526, 2554, 1862, 417, 1572},
		{2812, 628, 1536, 1841, 955, 1235, 3961, 1005, 3930, 3497, 507, 666, 713, 738, 3898, 1493, 2703, 1826, 796, 2897, 816, 3075, 2157, 2710, 1687, 529, 3171, 2045, 155, 962},
		{2421, 3026, 1569, 3696, 1175, 706, 3294, 2211, 1471, 343, 1649, 3009, 1891, 1581, 286, 2916, 1482, 533, 2290, 1910, 2206, 3, 1778, 949, 1389, 3809, 3423, 2035, 2810, 458},
		{2759, 4061, 947, 1271, 730, 617, 3703, 253, 301, 2829, 3285, 1516, 2006, 537, 4050, 3902, 2530, 306, 3115, 1343, 2110, 1380, 1429, 1481, 2826, 3477, 11, 1408, 3264, 3763},
		{616, 3652, 4057, 2784, 2485, 3464, 565, 40, 2924, 2651, 3987, 2193, 3083, 2607, 2510, 570, 2560, 2847, 2236, 3031, 338, 635, 2871, 2624, 1673, 3774, 1245, 1582, 1471, 3413},
		{1974, 3000, 1375, 834, 639, 2354, 946, 2178, 1488, 2996, 2337, 1321, 127, 594, 2254, 2365, 2146, 2821, 332, 345, 2258, 1714, 780, 3250, 1960, 627, 4059, 2908, 1733, 3341},
		{1072, 365, 2569, 3652, 1025, 3858, 282, 1129, 971, 3933, 4045, 626, 3357, 3345, 2666, 984, 2933, 1125, 3564, 1716, 3797, 2827, 933, 1910, 2022, 1629, 3901, 2998, 1236, 3029},
		{1255, 2512, 4020, 1476, 1869, 3661, 1937, 1695, 3432, 543, 3838, 2531, 1495, 1697, 3014, 1690, 876, 1610, 3413, 3358, 3231, 1347, 2174, 2219, 2098, 782, 584, 1756, 2004, 2225},
		{3766, 2326, 2779, 107, 2113, 2095, 2609, 2442, 567, 2676, 1658, 1287, 3870, 3441, 819, 875, 1810, 3167, 2905, 316, 1135, 748, 2401, 6, 897, 3758, 868, 880, 443, 642},
		{3778, 552, 3790, 2179, 3678, 3216, 2228, 1091, 3599, 3093, 1260, 779, 2823, 3198, 460, 3707, 3289, 2048, 899, 1229, 31, 1438, 1389, 1128, 1122, 1298, 1227, 1287, 2959, 2976},
		{1033, 3073, 2012, 3271, 1896, 580, 3501, 2879, 2890, 2904, 2697, 1849, 1090, 974, 2098, 3440, 3750, 2253, 3219, 2373, 1814, 1258, 2747, 4087, 1584, 3871, 2437, 3447, 158, 787},
		{1271, 569, 3704, 1696, 1777, 2272, 2807, 1564, 1688, 3586, 1512, 3290, 3078, 1721, 1225, 862, 131, 2063, 365, 62, 1788, 2766, 2173, 1035, 2848, 1855, 25, 2038, 697, 3579},
		{2845, 2540, 561, 2970, 1778, 2406, 779, 3026, 1928, 1810, 2574, 2727, 1274, 3227, 2577, 634, 158, 67, 2394, 1158, 1057, 2510, 1226, 54, 3872, 3313, 392, 1848, 1889, 2163},
		{1142, 770, 164, 833, 2084, 3294, 1233, 1085, 3753, 2045, 2047, 3977, 2724, 2980, 1851, 3163, 3276, 1024, 2203, 2061, 1002, 2825, 2807, 3187, 3224, 2524, 2713, 1471, 1101, 2439},
		{624, 502, 344, 2488, 83, 705, 1733, 1998, 2476, 874, 3453, 2929, 978, 4074, 3001, 3486, 1919, 2965, 1478, 2972, 1650, 1162, 211, 3818, 1330, 3277, 3432, 3151, 2075, 3325},
		{3992, 79, 343, 3740, 2445, 2522, 1828, 846, 2683, 1913, 3963, 1463, 3341, 362, 1679, 3820, 681, 670, 4012, 3816, 1150, 2403, 1475, 4071, 178, 2230, 308, 1056, 2548, 2738},
		{500, 3349, 1171, 612, 1744, 1931, 3305, 2839, 3732, 3223, 59, 1654, 3916, 3451, 1079, 3308, 1121, 2593, 1322, 3014, 650, 2040, 4055, 2082, 607, 161, 3288, 1683, 4021, 2431},
		{1376, 1905, 2753, 3223, 1564, 3144, 830, 1007, 849, 3866, 3816, 2765, 3412, 3560, 979, 1272, 2533, 2247, 1344, 2361, 3050, 1263, 2506, 3373, 874, 1962, 1075, 1555, 2810, 1924},
		{1684, 3932, 2021, 4026, 2495, 1609, 1471, 1250, 1817, 1818, 275, 3254, 1806, 3299, 1562, 2986, 3820, 2816, 11, 2418, 15, 2483, 169, 2843, 1238, 232, 2503, 1946, 860, 207},
		{3166, 79, 1926, 3973, 496, 1, 3545, 171, 2744, 1856, 394, 1270, 1799, 1968, 3704, 288, 3061, 1562, 2801, 3388, 3649, 578, 1452, 3606, 1995, 2044, 2523, 440, 3013, 1593},
		{3784, 2796, 317, 960, 3005, 1745, 2080, 2266, 3442, 3150, 3853, 2644, 2768, 968, 2026, 3167, 1987, 3085, 3844, 2463, 1235, 1106, 585, 419, 3991, 625, 189, 3709, 2629, 919},
		{19, 140, 2016, 1590, 2345, 3354, 3571, 4087, 1618, 2767, 2674, 3738, 2031, 913, 1694, 3738, 1223, 2660, 3125, 340, 1161, 3933, 535, 1204, 1214, 1139, 2928, 2492, 3195, 721},
		{2229, 2785, 2424, 987, 3950, 3332, 745, 2208, 952, 3257, 807, 939, 2065, 3496, 187, 3107, 199, 2561, 3287, 3476, 4081, 2130, 3310, 2499, 2554, 2211, 429, 596, 3751, 1788},
		{1254, 325, 930, 990, 3499, 1338, 990, 1125, 913, 3127, 2966, 698, 1187, 3911, 3419, 547, 2134, 2449, 1486, 3557, 1372, 433, 48, 1859, 1336, 687, 4040, 2809, 565, 3880},
		{1568, 2378, 3443, 2305, 232, 2066, 3735, 2831, 2990, 949, 1189, 1489, 1855, 2598, 1290, 3352, 1465, 3147, 200, 3690, 2752, 2391, 1266, 1193, 3259, 2930, 2642, 3706, 785, 1619},
		{1065, 893, 2369, 2194, 1129, 2923, 3338, 1323, 3597, 2536, 3617, 350, 1908, 2580, 1723, 2190, 3742, 1382, 4028, 2829, 189, 667, 696, 1199, 2479, 3635, 264, 1523, 42, 4063},
	}
	e_b_inv = [][]int{
		{501, 3691, 1766, 145, 777, 3216, 553, 637, 2856, 1920, 3250, 1925, 214, 2325, 1486, 175, 3308, 2272, 2141, 3538, 1447, 2211, 655, 830, 1889, 2408, 37, 160, 1790, 500},
		{3769, 246, 1246, 3842, 589, 525, 2550, 3280, 576, 3414, 2226, 3423, 183, 2872, 1321, 698, 1644, 964, 587, 3708, 3911, 224, 3868, 563, 1702, 2549, 2925, 2227, 198, 2125},
		{2136, 3440, 1652, 1219, 2593, 3498, 464, 2230, 632, 2302, 2660, 1520, 1450, 2928, 3141, 2741, 2568, 1956, 882, 1955, 2783, 2168, 677, 614, 3717, 4059, 3697, 2650, 2871, 1799},
		{16, 3317, 3771, 3897, 420, 2065, 2202, 2446, 3398, 285, 1593, 2821, 1895, 2643, 1070, 397, 730, 2445, 1903, 3800, 3763, 2238, 1454, 451, 1482, 1055, 1401, 2042, 1137, 3017},
		{820, 2522, 650, 3220, 1000, 3732, 3029, 2269, 3745, 1695, 3002, 3797, 2201, 1454, 3029, 1007, 622, 1015, 2283, 4027, 1761, 816, 3876, 1767, 2866, 3099, 3878, 3918, 3228, 1733},
		{3869, 1850, 3423, 2100, 2652, 617, 210, 881, 2387, 409, 2110, 3743, 2364, 636, 3365, 1427, 3735, 223, 1877, 1537, 1175, 255, 1877, 1080, 3563, 2272, 940, 2771, 2441, 756},
		{33, 2362, 1226, 1625, 212, 408, 3357, 2743, 2372, 2443, 2763, 2607, 396, 1340, 2396, 3995, 280, 331, 1828, 711, 1740, 3609, 3067, 1971, 988, 3339, 3759, 2305, 2898, 3224},
		{3563, 1580, 3036, 637, 426, 2471, 4041, 1255, 1787, 1257, 3915, 1431, 3440, 2706, 1235, 1937, 2680, 3515, 3383, 3222, 1671, 3587, 1747, 1798, 70, 2096, 2845, 676, 3576, 3857},
		{3910, 2351, 2600, 3442, 1521, 2345, 2293, 1479, 2831, 94, 3470, 4003, 2089, 3810, 271, 1680, 867, 3129, 3161, 3318, 3597, 2457, 3973, 225, 1185, 1801, 2692, 220, 2691, 2492},
		{2917, 3612, 1786, 2451, 3357, 851, 516, 3658, 2805, 2650, 771, 110, 234, 1065, 462, 1481, 1113, 1033, 2605, 1147, 2362, 3772, 353, 2843, 234, 385, 3616, 1355, 1734, 772},
		{2395, 3988, 1210, 749, 596, 3436, 1078, 2496, 3760, 3094, 3500, 3102, 2447, 3761, 1419, 1817, 1462, 1697, 3283, 755, 1863, 1758, 424, 1399, 871, 369, 3705, 3932, 403, 763},
		{4021, 903, 105, 3500, 2942, 3121, 3481, 725, 2627, 1326, 3722, 4024, 1196, 2411, 1855, 3479, 3313, 1191, 3680, 1774, 3294, 2018, 1871, 1722, 1250, 1541, 159, 59, 3927, 2989},
		{2731, 1637, 3602, 1597, 970, 2955, 1620, 830, 2627, 2350, 69, 3398, 1108, 103, 401, 1439, 3757, 1859, 1945, 2790, 2814, 3871, 3785, 3757, 3029, 397, 3811, 2640, 187, 2545},
		{3653, 1681, 1753, 2974, 52, 2860, 1480, 2146, 595, 921, 1230, 105, 1676, 695, 3416, 1231, 1466, 1866, 199, 518, 3342, 608, 1041, 1686, 1154, 2060, 1495, 3914, 350, 2836},
		{3151, 352, 2313, 3190, 2723, 3044, 564, 3644, 583, 2500, 389, 3946, 3314, 383, 3510, 3450, 2608, 849, 3619, 2217, 2296, 1796, 1993, 1140, 0, 531, 71, 435, 172, 3447},
		{615, 3646, 3384, 3470, 1729, 1851, 3006, 1774, 2551, 1838, 635, 3237, 3753, 3584, 3588, 2669, 2040, 2039, 1721, 3385, 1735, 72, 2098, 1123, 2303, 4086, 1407, 3077, 3380, 2730},
		{2481, 3004, 2920, 2137, 88, 1183, 2679, 176, 2133, 2155, 2806, 466, 840, 2341, 1702, 3782, 2338, 858, 1195, 3611, 3168, 1234, 640, 2914, 80, 1539, 987, 3237, 2740, 2324},
		{2673, 2619, 2249, 1491, 270, 423, 3726, 1081, 882, 2506, 2952, 2295, 491, 31, 3089, 1048, 763, 3929, 2275, 4041, 137, 3247, 2344, 2315, 3712, 1657, 647, 2808, 1481, 992},
		{3807, 1170, 326, 1149, 3067, 556, 3243, 856, 1054, 1248, 738, 2777, 1725, 3932, 3751, 672, 3258, 2876, 2224, 3461, 3688, 2359, 3496, 481, 167, 1323, 3539, 3676, 4056, 439},
		{1378, 2500, 709, 3405, 1770, 1718, 2611, 1152, 2543, 1503, 2601, 1809, 3147, 772, 32, 2582, 1717, 2494, 1922, 1535, 2206, 612, 1825, 310, 4036, 1680, 3993, 3869, 206, 2320},
		{2799, 3082, 267, 1481, 2947, 2342, 2930, 3686, 1505, 2931, 3189, 336, 1115, 2086, 1054, 1750, 3128, 2631, 807, 3338, 1210, 2776, 3847, 477, 1426, 3150, 1602, 2632, 1474, 3941},
		{2991, 2229, 790, 2176, 1764, 1397, 1920, 656, 3740, 1178, 3421, 3877, 3558, 3649, 975, 3269, 2223, 3979, 1653, 3459, 3030, 2, 3965, 3723, 2577, 1343, 3630, 2332, 1217, 3936},
		{633, 353, 3459, 3327, 3673, 3180, 948, 316, 3237, 3130, 730, 2998, 771, 3902, 2141, 3879, 2505, 113, 1583, 2542, 1271, 1450, 493, 145, 2893, 1123, 1477, 2667, 1126, 1489},
		{2104, 3938, 2817, 3001, 285, 1225, 229, 666, 3223, 2003, 436, 2319, 1976, 2060, 1232, 2979, 2393, 3923, 827, 1327, 804, 4005, 3535, 844, 720, 2102, 3185, 764, 4013, 2223},
		{506, 3823, 1987, 2, 3885, 1456, 1739, 995, 587, 575, 685, 2675, 473, 3037, 5, 3093, 3330, 1814, 301, 1836, 1532, 588, 28, 140, 2154, 2943, 2234, 2796, 2188, 4041},
		{498, 4008, 3831, 2871, 1607, 497, 1298, 699, 3708, 461, 1497, 2769, 1461, 2318, 3370, 1923, 126, 3596, 1955, 3925, 479, 1334, 2122, 275, 542, 1303, 3396, 2002, 963, 3006},
		{635, 4063, 2161, 1838, 2468, 2897, 2891, 915, 3680, 1858, 902, 1729, 1335, 3093, 881, 323, 3107, 1983, 1563, 3840, 1363, 1049, 3199, 1788, 3005, 3213, 1258, 526, 3780, 633},
		{3497, 1180, 1823, 2558, 2562, 3929, 3164, 207, 1503, 2379, 3308, 2246, 2969, 2900, 3103, 468, 2657, 582, 3462, 2090, 3777, 2752, 1087, 2986, 2947, 3043, 53, 2808, 2137, 1922},
		{3141, 1665, 149, 2586, 3342, 3479, 2367, 2320, 1860, 3765, 57, 1999, 784, 3801, 2170, 3032, 184, 290, 1639, 4039, 2450, 2302, 555, 517, 3910, 753, 865, 2332, 3579, 2571},
		{2394, 1811, 3612, 3560, 2456, 3111, 728, 1708, 3102, 372, 1478, 3735, 2839, 1854, 1981, 806, 429, 546, 1629, 987, 2648, 19, 1734, 2926, 2735, 3118, 1926, 2003, 584, 971},
	}
	a = finiteField.NewFieldElm(4063, q)

	P[0] = matrix.New(m, n, q)
	P[1] = matrix.New(m, n, q)
	E_A = matrix.New(m, n, q)
	E_B_inv = matrix.New(m, n, q)
	for i := 0; i < P[0].M; i++ {
		for j := 0; j < P[0].N; j++ {
			P[0].Set(i, j, finiteField.NewFieldElm(p0[i][j], q))
			P[1].Set(i, j, finiteField.NewFieldElm(p1[i][j], q))
			E_A.Set(i, j, finiteField.NewFieldElm(e_a[i][j], q))
			E_B_inv.Set(i, j, finiteField.NewFieldElm(e_b_inv[i][j], q))
		}
	}
	P[0] = P[0].Transpose()
	P[1] = P[1].Transpose()

	G = MatriciesToRows(P)

	A, B_inv = Solve(G, a, m, n)
	if !A.Equals(E_A) || !B_inv.Equals(E_B_inv) {
		t.Fatalf("Incorrect\n")
	}
}

func TestInverse(test *testing.T) {

}

func TestParseHash(test *testing.T) {
	sk, _ := KeyGen()
	msg := []byte("This is a message")
	f_sk := l_sec_seed
	sigma_G_0 := sk[f_sk : f_sk+l_pub_seed]
	f_sk += l_pub_seed
	G_0 := ExpandSystMat(sigma_G_0, q, k, m, n)

	A_inv := make([]*matrix.Matrix, s-1)
	B_inv := make([]*matrix.Matrix, s-1)
	for i := 0; i < s-1; i++ {
		// fmt.Printf("%v\n", len(sk[f_sk:f_sk+l_f_mm]))
		A_inv[i] = matrix.Decompress(sk[f_sk:f_sk+l_f_mm], m, m, q)
		f_sk += l_f_mm
		B_inv[i] = matrix.Decompress(sk[f_sk:f_sk+l_f_nn], n, n, q)
		f_sk += l_f_nn
	}
	delta := Randombytes(l_sec_seed)
	xof := sha3.NewShake256()
	xof.Write(delta)
	rho := make([]byte, l_tree_seed)
	alpha := make([]byte, l_salt)
	xof.Read(rho)
	xof.Read(alpha)
	seeds, err := SeedTree(rho, alpha, t)
	if err != nil {
		test.Errorf("error: %v\n", err)
		return
	}
	G_tilde := make([]*matrix.Matrix, t)
	A_tilde := make([]*matrix.Matrix, t)
	B_tilde := make([]*matrix.Matrix, t)

	for i := 0; i < t; i++ {
		sigma_prime := make([]byte, l_salt+l_tree_seed+4)
		sigma_A_tilde := make([]byte, l_pub_seed)
		sigma_B_tilde := make([]byte, l_pub_seed)
		x, err := ToBytes(int32(math.Pow(2, math.Ceil(math.Log2(float64(t))))), 4)
		if err != nil {
			test.Errorf("error: %v\n", err)
			return
		}
		idx := 0
		for j := 0; j < l_salt; j++ {
			sigma_prime[idx] = alpha[j]
			idx++
		}
		for j := 0; j < l_tree_seed; j++ {
			sigma_prime[idx] = seeds[i][j]
			idx++
		}
		for j := 0; j < 4; j++ {
			sigma_prime[idx] = x[j]
			idx++
		}
	LINE_16:
		xof = sha3.NewShake256()
		xof.Write(sigma_prime)
		xof.Read(sigma_A_tilde)
		xof.Read(sigma_B_tilde)
		xof.Read(sigma_prime)
		A_tilde[i] = ExpandInvMat(sigma_A_tilde, q, m)
		B_tilde[i] = ExpandInvMat(sigma_B_tilde, q, n)
		G_tilde[i] = Pi(A_tilde[i], G_0, B_tilde[i])
		G_tilde[i] = SF(G_tilde[i])
		if G_tilde[i] == nil {
			goto LINE_16
		}
	}
	H := sha3.NewShake256()
	for i := 0; i < t; i++ {
		H.Write(G_tilde[i].Submatrix(0, G_tilde[i].M, k, m*n).Compress())
	}
	H.Write(msg)
	d := make([]byte, l_digest)
	H.Read(d)
	h := ParseHash(s, t, w, d)

	count := 0
	for i := 0; i < t; i++ {
		if h[i] > 0 {
			count++
		}
	}

	if count != w {
		test.Errorf("Not enough non-zero values in h\nh:%v\n", h)
	}
}

func TestSeedTree(test *testing.T) {
	t := 5
	seed := []byte("seedseedseedseed")
	salt := []byte("saltsaltsaltsaltsaltsaltsaltsalt")
	seeds, err := SeedTree(seed, salt, t)

	test.Logf("Seed: %v\n", seed)
	test.Logf("Salt: %v\n", salt)
	test.Logf("T: %v\n", t)
	test.Logf("Seeds: %v\n", seeds)
	if err != nil {
		test.Errorf("error: %v\n", err)
	}
}

func TestSeedTreeToPath(test *testing.T) {
	seed := []byte("seedseedseedseed")
	salt := []byte("saltsaltsaltsaltsaltsaltsaltsalt")
	h := ParseHash(s, t, w, []byte("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"))
	test.Logf("h: %v\n", h)
	path := SeedTreeToPath(w, t, h, seed, salt)
	test.Logf("len(path): %v\n", len(path))
	test.Errorf("path: %v\n", path)
}

func TestPathToSeedTree(test *testing.T) {
	seed := []byte("seedseedseedseed")
	salt := []byte("saltsaltsaltsaltsaltsaltsaltsalt")
	h := []byte{0, 0, 0, 1, 0}
	t := 5
	w := 1
	path := SeedTreeToPath(w, t, h, seed, salt)
	// test.Logf("path: %v\n", path)
	seeds := PathToSeedTree(h, path, salt, len(seed))
	test.Errorf("seeds: %v\n", seeds)
}

func TestBase(test *testing.T) {
	delta := Randombytes(l_sec_seed)
	sigma_G_0 := make([]byte, l_pub_seed)
	sigma_A := make([]byte, l_pub_seed)
	sigma_B := make([]byte, l_pub_seed)
	sigma_Ap := make([]byte, l_pub_seed)
	sigma_Bp := make([]byte, l_pub_seed)
	xof := sha3.NewShake256()
	xof.Write(delta)
	xof.Read(sigma_G_0)
	xof.Read(sigma_A)
	xof.Read(sigma_B)
	xof.Read(sigma_Ap)
	xof.Read(sigma_Bp)

	G_0 := ExpandSystMat(sigma_G_0, q, k, m, n)

	A := ExpandInvMat(sigma_A, q, m)
	B := ExpandInvMat(sigma_B, q, n)

	G_1 := Pi(A, G_0, B)
	G_1 = SF(G_1)

	Ap := ExpandInvMat(sigma_Ap, q, m)
	Bp := ExpandInvMat(sigma_Bp, q, n)

	G_1p := Pi(Ap, G_0, Bp)
	G_1p = SF(G_1p)

	G_1t := Pi(Ap.Mul(Inverse(A)), G_1, Inverse(B).Mul(Bp))
	G_1t = SF(G_1t)

	fmt.Printf("%v\n\n\n", G_1p)
	fmt.Printf("%v\n", G_1t)
}
